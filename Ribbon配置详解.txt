1.Eureka客户端调用方在调用Eureka客户端服务提供时后台经常会抛出：feign.RetryableException: Read timed out executing POST

解决方法:
在你的yml文件中添加
ribbon:
  #设置读超时时间为60000秒
  ReadTimeout: 60000
  #设置连接超时时间
  ConnectTimeout: 60000

ConnectTimeout和ReadTimeout所代表的意义

ConnectTimeout
指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间。
在java中，网络状况正常的情况下，例如使用HttpClient或者HttpURLConnetion连接时设置参数connectTimeout=5000即5秒，
如果连接用时超过5秒就是抛出java.net.SocketException: connetct time out的异常。

ReadTimeout
指的是建立连接后从服务器读取到可用资源所用的时间。
在这里我们可以这样理解ReadTimeout：正常情况下，当我们发出请求时可以收到请求的结果，也就是页面上展示的内容，
但是当网络状况很差的时候，就会出现页面上无法展示出内容的情况。另外当我们使用爬虫或者其他全自动的程序时，无法判断当前的网络状况是否良好，
此时就有了ReadTimeout的用武之地了，通过设置ReadTimeout参数，例：ReadTimeout=5000，超过5秒没有读取到内容时，
就认为此次读取不到内容并抛出Java.net.SocketException: read time out的异常。



----------------------------------------------------------
2.Ribbon的饥饿加载(eager-load)模式
我们在使用Spring Cloud的Feign来实现服务调用的时候，如果我们的机器或网络环境等原因不是很好的话，有时候会发现这样一个问题：
我们服务消费方调用服务提供方接口的时候，第一次请求经常会超时，而之后的调用就没有问题了。下面我们就来说说造成这个问题的原因，
以及如何解决的方法。

#问题原因
造成第一次服务调用出现失败的原因主要是Ribbon进行客户端负载均衡的Client并不是在服务启动的时候就初始化好的，而是在调用的时候才会
去创建相应的Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，还包含了创建RibbonClient的时间，这样一来如果创建时间速度较
慢，同时设置的超时时间又比较短的话，很容易就会出现上面所描述的显现。

#解决方法
解决的方法很简单，既然第一次调用时候产生RibbonClient耗时，那么就让它提前创建，而不是在第一次调用的时候创建。
在Spring Cloud的Dlaston版本中提供了几个新的参数，它们可以很方便的帮我们实现这样的功能。
#开启Ribbon的饥饿加载模式
ribbon.eager-load.enabled=true
#指定需要饥饿加载的客户端名称、服务名
ribbon.eager-load.clients=hello-service, user-service

参考：
ConnectTimeout和ReadTimeout所代表的意义
https://blog.csdn.net/Mlong54/article/details/78831251
