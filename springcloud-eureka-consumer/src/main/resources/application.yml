server:
  port: 8763

eureka:
  instance:
    hostname: localhost
    lease-expiration-duration-in-seconds: 30
    lease-renewal-interval-in-seconds: 30
  client:
    registerWithEureka: false
    fetchRegistry: true
    serviceUrl:
            defaultZone: http://localhost:8761/eureka/
  #server:
    #enable-self-preservation: false

feign:
  #开启feign使用hystrix,Spring Cloud默认已经为Feign整合了Hystrix，我们只需要开启
  hystrix:
    enabled: true
  httpclient:
    #默认情况下，feign通过jdk中的HttpURLConnection向下游服务发起http请求,激活feign使用httpclient
    enabled: true
    #连接池中最大连接数
    max-connections: 1000
    #每个route最大并发连接数，什么是route？ route就是一条路由，它将一个URL路径和一个函数进行映射
    #在这里我们可以分别将该值设置为1和2进行测试
    #设置为1时，请求是串行进行的，第一个请求处理完并返回之后，才会再发起第二个请求。
    #设置为2时，请求时并行进行的，第一个请求处理过程中还没返回，第二个请求同时可以发起。
    #最后,注意：该值必须比hystrix.htreadpool.default.maximumSize小才有意义，因为其已经在前拦截一层。
    max-connections-per-route: 1

#在这里为了方便测试超时熔断处理，如果不添加很难测试，因为会抛出Read timed out
ribbon:
  #请求处理的超时时间，指的是建立连接后从服务器读取到可用资源所用的时间
  ReadTimeout: 60000
  #请求连接的超时时间,Eureka客户端服务提供方与Eureka客户端服务调用方建立连接所用时间
  ConnectTimeout: 60000
  eager-load:
      #开启Ribbon的饥饿加载模式
      enabled: true
      #指定需要饥饿加载的Eureka服务名,我们的服务名是service-provider
      clients: [service-provider]


hystrix:
  #设置全局超时时间为10秒，还可以针对单个方法
  command.default.execution.isolation.thread.timeoutInMilliseconds: 10000
  threadpool.default:
      #最大线程数决定了Eureka客户端提供的服务能处理的请求个数，超过的请求可通过熔断降级， 模拟两个请求同时访问
      #核心线程数，当核心线程不够用的时候会创建新线程，但不会超过最大线程数
      coreSize: 10
      #当核心线程不够用的时候，超过了最大线程数之后的请求会被hystrix降级处理，即调用hystrxi中的fallback属性指定的降级方法。如果没有指定降级方法，则会默认返回null
      maximumSize: 10
      #要使用maximumSize，则必须配置次参数
      allowMaximumSizeToDivergeFromCoreSize: true